/*
 * Copyright (C) 2014 Benny Bobaganoosh
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


struct DirectionalLight
{
	vec3 direction;
	vec3 color;
};

struct PointLight
{
	vec3 position;
  	vec3 color;
	float distance;
};

struct SpotLight 
{
    vec3 position;
    vec3 direction;
    float cutOff;
    float outerCutOff;
	vec3 color;
	float distance;
};


#define MAX_POINT_LIGHT 12
#define MAX_SPOT_LIGHT 12
#define DIRLIGHT_DISTANCE 1 // change to ZFar later on

uniform PointLight pointLights[MAX_POINT_LIGHT];
uniform SpotLight spotLights[MAX_SPOT_LIGHT];
uniform DirectionalLight directionalLight;


vec3 CalculateDirectionalLight(DirectionalLight light, vec3 normal, vec3 viewDir, vec4 diffuseTextureColor, vec4 specularTextureColor)
{
    vec3 lightDir = normalize(-light.direction);
	
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
	vec3 diffuse = diff * light.color;
	
    // specular shading
	vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(normal, halfwayDir), 0.0), material.specularExponent);
	vec3 specular = spec * light.color * material.specularIntensity * vec3(specularTextureColor);
	
	float attenuation = 1.0 / (DIRLIGHT_DISTANCE * DIRLIGHT_DISTANCE);
	diffuse *= attenuation;
	specular *= attenuation;
	return diffuse + specular;
}


vec3 CalculatePointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir, vec4 diffuseTextureColor, vec4 specularTextureColor)
{
    vec3 lightDir = normalize(light.position - fragPos);
	 
	// diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
	vec3 diffuse = diff * light.color;
	
    // specular shading
	vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(normal, halfwayDir), 0.0), material.specularExponent);
	vec3 specular = spec * light.color * vec3(specularTextureColor);
	
	float maxDistance = light.distance;
	float distance = length(light.position - fragPos);
	float attenuation = 1.0 / (distance * distance);
	diffuse *= attenuation;
	specular *= attenuation;
	return diffuse + specular;
}

vec3 CalculateSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir, vec4 diffuseTextureColor, vec4 specularTextureColor)
{
	vec3 lightDir = normalize(light.position - fragPos);
	
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
	vec3 diffuse = diff * light.color;
	
	// specular shading
	vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(normal, halfwayDir), 0.0), material.specularExponent);
	vec3 specular = spec * light.color * vec3(specularTextureColor);
	
	float maxDistance = light.distance;
	float distance = length(light.position - fragPos);
	float attenuation = 1.0 / (distance * distance);  
	
    // spotlight intensity
    float theta = dot(lightDir, normalize(-light.direction)); 
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
	
    diffuse *= attenuation * intensity;
	specular *= attenuation * intensity;
	return diffuse + specular;
}


