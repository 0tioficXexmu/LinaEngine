/*
 * Copyright (C) 2014 Benny Bobaganoosh
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

vec3 CalculateDirectionalLight(DirectionalLight light, vec3 normal, vec3 viewDir)
{
    vec3 lightDir = normalize(-light.direction);
	
	
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
	vec3 diffuse = diff * light.color;
	
    // specular shading
	vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(normal, halfwayDir), 0.0), 24);
	vec3 specular = spec * light.color;
	
	float attenuation = 1.0 / (DIRLIGHT_DISTANCE * DIRLIGHT_DISTANCE);
	diffuse *= attenuation;
	specular *= attenuation;
	return diffuse + specular;
}


vec3 CalculatePointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
	 
	// diffuse shading
    float diff = max(dot(lightDir, normal), 0.0);
	vec3 diffuse = diff * light.color;
	
    // specular shading
	vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(normal, halfwayDir), 0.0), material.specularExponent);
	vec3 specular = spec * light.color;
	
	float maxDistance = light.distance;
	float distance = length(light.position - fragPos);
	float attenuation = 1.0 / (distance * distance);
	diffuse *= attenuation;
	specular *= attenuation;
	return diffuse + specular;
}

vec3 CalculateSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
	vec3 lightDir = normalize(light.position - fragPos);
	
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
	vec3 diffuse = diff * light.color;
	
	// specular shading
	vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(normal, halfwayDir), 0.0), material.specularExponent);
	vec3 specular = spec * light.color;
	
	float maxDistance = light.distance;
	float distance = length(light.position - fragPos);
	float attenuation = 1.0 / (distance * distance);  
	
    // spotlight intensity
    float theta = dot(lightDir, normalize(-light.direction)); 
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
	
    diffuse *= attenuation * intensity;
	specular *= attenuation * intensity;
	return diffuse + specular;
}

//float ShadowCalculation(vec4 fragPosLightSpace, vec3 lightPos)
//{
//   // perform perspective divide
//    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
//	
//    // transform to [0,1] range
//    projCoords = projCoords * 0.5 + 0.5;
//	
//    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
//    float closestDepth = texture(material.shadowMap.texture, projCoords.xy).r; 
//	
//    // get depth of current fragment from light's perspective
//    float currentDepth = projCoords.z;
//	
//    // calculate bias (based on depth map resolution and slope)
//    vec3 normal = normalize(fs_in.Normal);
//    vec3 lightDir = normalize(lightPos - fs_in.FragPos);
//    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);
//	
//    // check whether current frag pos is in shadow
//    // float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;
//    // PCF
//    float shadow = 0.0;
//    vec2 texelSize = 1.0 / textureSize(material.shadowMap.texture, 0);
//    for(int x = -1; x <= 1; ++x)
//    {
//        for(int y = -1; y <= 1; ++y)
//        {
//            float pcfDepth = texture(material.shadowMap.texture, projCoords.xy + vec2(x, y) * texelSize).r; 
//            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;        
//        }    
//    }
//    shadow /= 9.0;
//    
//    // keep the shadow at 0.0 when outside the far_plane region of the light's frustum.
//    if(projCoords.z > 1.0)
//        shadow = 0.0;
//        
//    return shadow;
//}

