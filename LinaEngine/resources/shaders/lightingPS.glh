/*
 * Copyright (C) 2014 Benny Bobaganoosh
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


struct DirectionalLight
{
	vec3 position;
	vec3 color;
};

struct PointLight
{
	vec3 position;
  	vec3 color;
	float distance;
};

struct SpotLight 
{
    vec3 position;
    vec3 direction;
    float cutOff;
    float outerCutOff;
	vec3 color;
	float distance;
};


#define MAX_POINT_LIGHT 12
#define MAX_SPOT_LIGHT 12
#define DIRLIGHT_DISTANCE 1 // change to ZFar later on

uniform PointLight pointLights[MAX_POINT_LIGHT];
uniform SpotLight spotLights[MAX_SPOT_LIGHT];
uniform DirectionalLight directionalLight;


float ShadowCalculation(vec3 fragPos, vec3 lightPos, float farPlane)
{
    // get vector between fragment position and light position
    vec3 fragToLight = fragPos - lightPos;
    // use the light to fragment vector to sample from the depth map    
    float closestDepth = texture(material.shadowMap.texture, fragToLight).r;
    // it is currently in linear range between [0,1]. Re-transform back to original value
    closestDepth *= farPlane;
    // now get current linear depth as the length between the fragment and light position
    float currentDepth = length(fragToLight);
    // now test for shadows
    float bias = 0.05; 
    float shadow = currentDepth -  bias > closestDepth ? 1.0 : 0.0;
	
    return shadow;
}


//vec3 sampleOffsetDirections[20] = vec3[]
//(
//   vec3( 1,  1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1,  1,  1), 
//   vec3( 1,  1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1,  1, -1),
//   vec3( 1,  1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1,  1,  0),
//   vec3( 1,  0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1,  0, -1),
//   vec3( 0,  1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0,  1, -1)
//);   
//
//float ShadowCalculation(vec3 fragPos, vec3 lightPos, float farPlane, vec3 viewPos)
//{
//    // get vector between fragment position and light position
//    vec3 fragToLight = fragPos - lightPos;
//    
//	  // now get current linear depth as the length between the fragment and light position
//    float currentDepth = length(fragToLight);
//	
//	float shadow = 0.0;
//    float bias = 0.15;
//    int samples = 8;
//    float viewDistance = length(viewPos - fragPos);
//    float diskRadius = (1.0 + (viewDistance / farPlane)) / 25.0;
//    for(int i = 0; i < samples; ++i)
//    {
//        float closestDepth = texture(material.shadowMap.texture, fragToLight + gridSamplingDisk[i] * diskRadius).r;
//        closestDepth *= farPlane;   // undo mapping [0;1]
//        if(currentDepth - bias > closestDepth)
//            shadow += 1.0;
//    }
//    shadow /= float(samples);
//        
//    // display closestDepth as debug (to visualize depth cubemap)
//    // FragColor = vec4(vec3(closestDepth / far_plane), 1.0);    
//        
//    return shadow;
//}